service: nozuus-backend

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-plugin-existing-s3

custom:
  wsgi:
    app: api.app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetBucketNotification"
        - "s3:PutBucketNotification"
        - s3:PutObject
        - s3:GetObject
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::nozuus-emails/*"
    - Effect: "Allow"
      Resource: "*"
      Action:
        - "sns:*"
        - SES:*
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ UsersTable, Arn ]
        - "Fn::GetAtt": [ EmailListsTable, Arn ]
        - "Fn::GetAtt": [ SubscriptionsTable, Arn ]
        - { "Fn::Join": [ "/", [
          { "Fn::GetAtt": [EmailListsTable, Arn] }, "index", "*"
          ]]}

package: # Optional deployment packaging configuration
  include: # Specify the directories and files which should be included in the deployment package
    - email/**
    - api/**

# Create our resources with separate CloudFormation templates
resources:
  # DynamoDB
  - ${file(resources/dynamodb.yml)}

functions:
  api:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  email_received:
    handler: emailer.emailmanager.email_received
    events:
      - sns: email_received
      - existingS3:
          bucket: nozuus-emails
          events:
            - s3:ObjectCreated:*